name: Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Wait for CI tests to complete before deploying
  check-ci:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Wait for CI workflow to complete
        uses: actions/github-script@v7
        with:
          script: |
            const sha = context.sha;
            console.log(`Checking for CI workflow completion for commit: ${sha}`);
            
            // Wait for CI workflow to complete
            let attempts = 0;
            const maxAttempts = 30; // 15 minutes max wait
            
            while (attempts < maxAttempts) {
              const { data: runs } = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'ci.yml',
                head_sha: sha,
                per_page: 1
              });
              
              if (runs.workflow_runs.length > 0) {
                const run = runs.workflow_runs[0];
                console.log(`CI workflow status: ${run.status} - ${run.conclusion}`);
                
                if (run.status === 'completed') {
                  if (run.conclusion === 'success') {
                    console.log('‚úÖ CI workflow completed successfully');
                    break;
                  } else {
                    core.setFailed(`‚ùå CI workflow failed with conclusion: ${run.conclusion}`);
                    return;
                  }
                }
              }
              
              attempts++;
              if (attempts < maxAttempts) {
                console.log(`Waiting for CI workflow... (attempt ${attempts}/${maxAttempts})`);
                await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30 seconds
              }
            }
            
            if (attempts >= maxAttempts) {
              core.setFailed('‚ùå Timeout waiting for CI workflow to complete');
            }

  # Build and deploy job - depends on CI tests passing
  deploy:
    runs-on: ubuntu-latest
    needs: check-ci
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Create deployment directory
        run: |
          mkdir -p ./dist
          
      - name: Copy application files
        run: |
          cp index.html ./dist/
          cp material-design-enhanced.css ./dist/
          cp script.js ./dist/
          cp statistics.html ./dist/
          cp manifest.json ./dist/
          cp sw.js ./dist/
          cp *.png ./dist/ 2>/dev/null || true
          cp *.svg ./dist/ 2>/dev/null || true
          cp sample-workout.md ./dist/
          cp -r js/ ./dist/ 2>/dev/null || true
          
      - name: Create 404.html for SPA routing
        run: |
          cp ./dist/index.html ./dist/404.html
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Create Deployment Summary
        run: |
          echo "## üöÄ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Application URL" >> $GITHUB_STEP_SUMMARY
          echo "[${{ steps.deployment.outputs.page_url }}](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì± PWA Features" >> $GITHUB_STEP_SUMMARY
          echo "- Install the app on mobile devices" >> $GITHUB_STEP_SUMMARY
          echo "- Offline functionality with service worker" >> $GITHUB_STEP_SUMMARY
          echo "- Responsive design for all screen sizes" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üß™ Testing" >> $GITHUB_STEP_SUMMARY
          echo "All tests passed before deployment. Check the CI workflow for detailed test results." >> $GITHUB_STEP_SUMMARY