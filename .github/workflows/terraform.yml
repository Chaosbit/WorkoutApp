name: Terraform Infrastructure

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main, master ]
    paths: 
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev/production)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - production
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6.0

      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Copy Variables File
        run: |
          cd terraform
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            cp terraform.tfvars.prod terraform.tfvars
          else
            cp terraform.tfvars.example terraform.tfvars
          fi

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

      - name: Terraform Format Check
        run: |
          cd terraform
          terraform fmt -check

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform plan -var="environment=${{ steps.env.outputs.environment }}" -no-color -out=tfplan
        continue-on-error: true

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Environment: \`${{ steps.env.outputs.environment }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Upload Plan
        if: steps.plan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ steps.env.outputs.environment }}
          path: terraform/tfplan
          retention-days: 30

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && 
      (github.event_name == 'push' || 
       (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'))
    environment: 
      name: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6.0
          terraform_wrapper: false

      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Copy Variables File
        run: |
          cd terraform
          if [[ "${{ steps.env.outputs.environment }}" == "production" ]]; then
            cp terraform.tfvars.prod terraform.tfvars
          else
            cp terraform.tfvars.example terraform.tfvars
          fi

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -var="environment=${{ steps.env.outputs.environment }}" -auto-approve

      - name: Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd terraform
          echo "app_service_name=$(terraform output -raw app_service_name)" >> $GITHUB_OUTPUT
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "app_service_url=$(terraform output -raw app_service_url)" >> $GITHUB_OUTPUT
          echo "api_url=$(terraform output -raw app_service_api_url)" >> $GITHUB_OUTPUT

      - name: Create Deployment Summary
        run: |
          cd terraform
          echo "## Terraform Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ steps.env.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Resource | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| App Service Name | \`${{ steps.terraform-outputs.outputs.app_service_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Resource Group | \`${{ steps.terraform-outputs.outputs.resource_group_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| App URL | [${{ steps.terraform-outputs.outputs.app_service_url }}](${{ steps.terraform-outputs.outputs.app_service_url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| API URL | [${{ steps.terraform-outputs.outputs.api_url }}](${{ steps.terraform-outputs.outputs.api_url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Deploy the backend application using the 'Deploy Backend' workflow" >> $GITHUB_STEP_SUMMARY
          echo "2. Update frontend configuration with the API URL" >> $GITHUB_STEP_SUMMARY
          echo "3. Test the deployed infrastructure" >> $GITHUB_STEP_SUMMARY

      - name: Save Deployment Info
        run: |
          cd terraform
          terraform output -json > ../deployment-info.json

      - name: Upload Deployment Info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info-${{ steps.env.outputs.environment }}
          path: deployment-info.json
          retention-days: 30

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: 
      name: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Confirm Destruction
        run: |
          echo "‚ö†Ô∏è WARNING: This will destroy all infrastructure in the ${{ github.event.inputs.environment }} environment!"
          echo "This action cannot be undone and will result in data loss."

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.6.0

      - name: Copy Variables File
        run: |
          cd terraform
          if [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            cp terraform.tfvars.prod terraform.tfvars
          else
            cp terraform.tfvars.example terraform.tfvars
          fi

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Destroy
        run: |
          cd terraform
          terraform destroy -var="environment=${{ github.event.inputs.environment }}" -auto-approve

      - name: Create Destruction Summary
        run: |
          echo "## Terraform Destruction Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Environment: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ All infrastructure resources have been destroyed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **Important**: Any data stored in the infrastructure has been permanently deleted." >> $GITHUB_STEP_SUMMARY