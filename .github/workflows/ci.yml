name: Continuous Integration

on:
  push:
    branches: [ main, master ]
    # Run full test suite on main/master
  pull_request:
    branches: [ main, master ]
    # Run quick test suite on PRs
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'full'
        type: choice
        options:
          - quick
          - full

# Permissions needed for test reporting
permissions:
  contents: read
  checks: write
  pull-requests: write

# Allow cancellation of previous runs on the same PR/branch
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick tests for PRs: unit tests + basic E2E
  test-quick:
    name: Quick Tests (Unit + Basic E2E)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'quick')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Run unit tests with coverage
        run: cd frontend && npm run test:unit:coverage

      - name: Generate unit test report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit Tests Report
          path: 'frontend/coverage/junit.xml'
          reporter: jest-junit
          fail-on-error: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-quick
          path: frontend/coverage/
          retention-days: 7

      - name: Run basic E2E tests (Chrome Desktop only)
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          headless: true
          record: false
          start: cd frontend && python3 -m http.server 8000
          wait-on: 'http://localhost:8000'
          working-directory: frontend
          wait-on-timeout: 120
          spec: 'cypress/e2e/ui-behavior.cy.js,cypress/e2e/timer-functionality.cy.js'

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-results-quick
          path: |
            cypress/screenshots
            cypress/videos
            cypress/reports
          retention-days: 7

  # Full test suite for main branch: unit tests + comprehensive E2E
  test-full:
    name: Full Test Suite
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_suite == 'full')
    strategy:
      fail-fast: false
      matrix:
        test-type: [desktop, mobile]
        include:
          - test-type: desktop
            config-file: cypress.config.js
            test-name: Chrome Desktop
          - test-type: mobile
            config-file: cypress.mobile.config.js
            test-name: Chrome Mobile

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: cd frontend && npm ci

      - name: Run unit tests with coverage
        if: matrix.test-type == 'desktop'
        run: npm run test:unit:coverage

      - name: Generate unit test report
        uses: dorny/test-reporter@v1
        if: always() && matrix.test-type == 'desktop'
        with:
          name: Unit Tests Report (Full Suite)
          path: 'coverage/junit.xml'
          reporter: jest-junit
          fail-on-error: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always() && matrix.test-type == 'desktop'
        with:
          name: coverage-report-full
          path: coverage/
          retention-days: 14

      - name: Run E2E tests - ${{ matrix.test-name }}
        uses: cypress-io/github-action@v6
        with:
          browser: chrome
          headless: true
          record: false
          config-file: ${{ matrix.config-file }}
          start: cd frontend && python3 -m http.server 8000
          wait-on: 'http://localhost:8000'
          working-directory: frontend
          wait-on-timeout: 120

      - name: Generate E2E test report - ${{ matrix.test-name }}
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: E2E Tests Report - ${{ matrix.test-name }}
          path: 'cypress/reports/junit.xml'
          reporter: jest-junit
          fail-on-error: false

      - name: Upload E2E test results - ${{ matrix.test-name }}
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-results-${{ matrix.test-type }}
          path: |
            cypress/screenshots
            cypress/videos
            cypress/reports
          retention-days: 14

  # Lint and format check
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: cd frontend && npm ci

      # Add linting if package.json has lint scripts
      - name: Check for lint scripts
        id: check-lint
        run: |
          if npm run | grep -q "lint"; then
            echo "has_lint=true" >> $GITHUB_OUTPUT
          else
            echo "has_lint=false" >> $GITHUB_OUTPUT
          fi

      - name: Run linter
        if: steps.check-lint.outputs.has_lint == 'true'
        run: npm run lint

      - name: Check code formatting
        if: steps.check-lint.outputs.has_lint == 'true'
        run: |
          if npm run | grep -q "format:check"; then
            npm run format:check
          else
            echo "No format check script found, skipping"
          fi

      - name: Validate HTML, CSS, and JS syntax
        run: |
          echo "Running basic syntax validation..."
          
          # Check HTML files using Python script
          python3 .github/scripts/validate-html.py
          
          # Check JS files
          for file in *.js js/*.js; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              node -c "$file" && echo "✓ $file syntax OK"
            fi
          done

  # Create consolidated test report
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-quick, test-full, lint-and-format]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Create test summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check job results
          if [[ "${{ needs.test-quick.result }}" == "success" ]]; then
            echo "✅ **Quick Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-quick.result }}" != "skipped" ]]; then
            echo "❌ **Quick Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test-full.result }}" == "success" ]]; then
            echo "✅ **Full Test Suite**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.test-full.result }}" != "skipped" ]]; then
            echo "❌ **Full Test Suite**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.lint-and-format.result }}" == "success" ]]; then
            echo "✅ **Lint & Format**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Lint & Format**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Test coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "- E2E test screenshots and videos" >> $GITHUB_STEP_SUMMARY
          echo "- JUnit test reports for easy analysis" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Test Reports" >> $GITHUB_STEP_SUMMARY
          echo "Check the 'Actions' tab for detailed test reports and downloads." >> $GITHUB_STEP_SUMMARY

      - name: Upload consolidated test report
        uses: actions/upload-artifact@v4
        with:
          name: test-summary-report
          path: test-results/
          retention-days: 30