name: Deploy Backend to Azure

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (dev/production)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - production
      use_staging_slot:
        description: 'Deploy to staging slot first (production only)'
        required: false
        default: false
        type: boolean

env:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: |
          cd backend/WorkoutApp.Api
          dotnet restore

      - name: Build Application
        run: |
          cd backend/WorkoutApp.Api
          dotnet build --configuration Release --no-restore

      - name: Run Unit Tests
        run: |
          cd backend
          if [ -d "WorkoutApp.Tests" ]; then
            dotnet test WorkoutApp.Tests --configuration Release --no-build --verbosity normal
          else
            echo "No tests found, skipping test step"
          fi

      - name: Publish Application
        run: |
          cd backend/WorkoutApp.Api
          dotnet publish --configuration Release --no-build --output ./publish

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: workout-app-backend
          path: backend/WorkoutApp.Api/publish/
          retention-days: 30

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && 
      (github.event_name == 'push' || 
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'))
    environment: 
      name: dev
      url: ${{ steps.deploy.outputs.webapp-url }}
    
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: workout-app-backend
          path: ./publish

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get App Service Name
        id: get-app-name
        run: |
          # Try to get from deployment info or use default pattern
          if [ -f "deployment-info.json" ]; then
            APP_NAME=$(jq -r '.app_service_name.value' deployment-info.json)
          else
            # Default naming pattern for dev environment
            APP_NAME="workoutapp-api-dev-$(echo '${{ github.repository }}' | sed 's/.*\///' | tr '[:upper:]' '[:lower:]')"
          fi
          echo "app_service_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Deploy to Azure Web App
        id: deploy
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ steps.get-app-name.outputs.app_service_name }}
          package: ./publish

      - name: Health Check
        run: |
          sleep 30  # Wait for deployment to stabilize
          HEALTH_URL="${{ steps.deploy.outputs.webapp-url }}/health"
          echo "Checking health endpoint: $HEALTH_URL"
          
          # Try health check with retries
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null 2>&1; then
              echo "✅ Health check passed"
              break
            else
              echo "❌ Health check failed (attempt $i/5)"
              if [ $i -eq 5 ]; then
                echo "Health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Create Deployment Summary
        run: |
          echo "## Backend Deployment Summary - Development" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Development |" >> $GITHUB_STEP_SUMMARY
          echo "| App Service | \`${{ steps.get-app-name.outputs.app_service_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Application URL | [${{ steps.deploy.outputs.webapp-url }}](${{ steps.deploy.outputs.webapp-url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| API Base URL | [${{ steps.deploy.outputs.webapp-url }}/api](${{ steps.deploy.outputs.webapp-url }}/api) |" >> $GITHUB_STEP_SUMMARY
          echo "| Swagger UI | [${{ steps.deploy.outputs.webapp-url }}/swagger](${{ steps.deploy.outputs.webapp-url }}/swagger) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the API endpoints using Swagger UI" >> $GITHUB_STEP_SUMMARY
          echo "2. Update frontend configuration with the API URL" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify authentication and data synchronization" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && 
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.environment == 'production'
    environment: 
      name: production
      url: ${{ steps.deploy-prod.outputs.webapp-url }}
    
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: workout-app-backend
          path: ./publish

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get App Service Name
        id: get-app-name
        run: |
          # Try to get from deployment info or use default pattern
          if [ -f "deployment-info.json" ]; then
            APP_NAME=$(jq -r '.app_service_name.value' deployment-info.json)
          else
            # Default naming pattern for production environment
            APP_NAME="workoutapp-api-production-$(echo '${{ github.repository }}' | sed 's/.*\///' | tr '[:upper:]' '[:lower:]')"
          fi
          echo "app_service_name=$APP_NAME" >> $GITHUB_OUTPUT

      - name: Deploy to Staging Slot
        id: deploy-staging
        if: github.event.inputs.use_staging_slot == 'true'
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ steps.get-app-name.outputs.app_service_name }}
          slot-name: staging
          package: ./publish

      - name: Health Check - Staging
        if: github.event.inputs.use_staging_slot == 'true'
        run: |
          sleep 30  # Wait for deployment to stabilize
          STAGING_URL="https://${{ steps.get-app-name.outputs.app_service_name }}-staging.azurewebsites.net"
          HEALTH_URL="$STAGING_URL/health"
          echo "Checking staging health endpoint: $HEALTH_URL"
          
          # Try health check with retries
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null 2>&1; then
              echo "✅ Staging health check passed"
              break
            else
              echo "❌ Staging health check failed (attempt $i/5)"
              if [ $i -eq 5 ]; then
                echo "Staging health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Swap Staging to Production
        if: github.event.inputs.use_staging_slot == 'true'
        run: |
          az webapp deployment slot swap \
            --name ${{ steps.get-app-name.outputs.app_service_name }} \
            --resource-group $(az webapp show --name ${{ steps.get-app-name.outputs.app_service_name }} --query resourceGroup -o tsv) \
            --slot staging \
            --target-slot production

      - name: Deploy Direct to Production
        id: deploy-prod
        if: github.event.inputs.use_staging_slot != 'true'
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ steps.get-app-name.outputs.app_service_name }}
          package: ./publish

      - name: Get Production URL
        id: get-prod-url
        run: |
          PROD_URL="https://${{ steps.get-app-name.outputs.app_service_name }}.azurewebsites.net"
          echo "webapp-url=$PROD_URL" >> $GITHUB_OUTPUT

      - name: Health Check - Production
        run: |
          sleep 30  # Wait for deployment to stabilize
          HEALTH_URL="${{ steps.get-prod-url.outputs.webapp-url }}/health"
          echo "Checking production health endpoint: $HEALTH_URL"
          
          # Try health check with retries
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null 2>&1; then
              echo "✅ Production health check passed"
              break
            else
              echo "❌ Production health check failed (attempt $i/5)"
              if [ $i -eq 5 ]; then
                echo "Production health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Run Smoke Tests
        run: |
          BASE_URL="${{ steps.get-prod-url.outputs.webapp-url }}"
          echo "Running smoke tests against: $BASE_URL"
          
          # Test API endpoints
          echo "Testing API health..."
          curl -f "$BASE_URL/health" || exit 1
          
          echo "Testing Swagger UI..."
          curl -f "$BASE_URL/swagger" > /dev/null || exit 1
          
          echo "Testing API base endpoint..."
          curl -f "$BASE_URL/api" > /dev/null || exit 1
          
          echo "✅ All smoke tests passed"

      - name: Create Production Deployment Summary
        run: |
          echo "## Backend Deployment Summary - Production" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Production |" >> $GITHUB_STEP_SUMMARY
          echo "| App Service | \`${{ steps.get-app-name.outputs.app_service_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Application URL | [${{ steps.get-prod-url.outputs.webapp-url }}](${{ steps.get-prod-url.outputs.webapp-url }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| API Base URL | [${{ steps.get-prod-url.outputs.webapp-url }}/api](${{ steps.get-prod-url.outputs.webapp-url }}/api) |" >> $GITHUB_STEP_SUMMARY
          echo "| Swagger UI | [${{ steps.get-prod-url.outputs.webapp-url }}/swagger](${{ steps.get-prod-url.outputs.webapp-url }}/swagger) |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Method | ${{ github.event.inputs.use_staging_slot == 'true' && 'Blue-Green (Staging Slot)' || 'Direct to Production' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Post-Deployment Checklist" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Health checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Smoke tests completed" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Update frontend configuration" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Monitor application performance" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Verify user authentication flow" >> $GITHUB_STEP_SUMMARY

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-production]
    if: always()
    
    steps:
      - name: Create Final Summary
        run: |
          echo "## 🚀 Backend Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-dev.result }}" == "success" ]]; then
            echo "✅ **Development**: Deployment successful" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-dev.result }}" != "skipped" ]]; then
            echo "❌ **Development**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "✅ **Production**: Deployment successful" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-production.result }}" != "skipped" ]]; then
            echo "❌ **Production**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "Monitor your deployed applications using Application Insights in the Azure portal." >> $GITHUB_STEP_SUMMARY